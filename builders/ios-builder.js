const { transformTokens } = require("token-transformer");
const StyleDictionary = require("style-dictionary");
const _ = require("lodash");
const fs = require("fs");
const path = require("path");

// Tokens generated by Tokens Studio
const rawTokens = require("../tokens.json");

// Platform options config for each style dictionary
const STYLE_DICTIONARY_BASE_PLATFORM_CONFIG = {
  transforms: [
    "attribute/cti",
    "name/cti/camel",
    "color/UIColorSwift",
    "content/swift/literal",
    "asset/swift/literal",
    "size/swift/remToCGFloat",
    "font/swift/literal",
    "custom/attribute/iosHexColor",
    "custom/name/removeColorNamespace",
  ],
  buildPath: "dist/ios/",
};

StyleDictionary.registerFormat({
  name: "custom/format/ios-ys-style-guide-colors",
  formatter: _.template(
    fs.readFileSync(
      path.join(__dirname, "..", "templates", "style-guide-colors.template")
    )
  ),
});

StyleDictionary.registerTransform({
  type: "attribute",
  name: "custom/attribute/iosHexColor",
  matcher: (token) => token.type === "color",
  transformer: (token) => {
    token.attributes.iosHexColor = `0x${token.value
      .replace("#", "")
      .toUpperCase()}`;
  },
});

StyleDictionary.registerTransform({
  type: "attribute",
  name: "custom/name/removeColorNamespace",
  matcher: (token) => token.type === "color",
  transformer: (token) => {
    token.name = _.camelCase(token.name.replace(/^colors/, ""));
  },
});

// Format our Tokens Setudio token sets for Style Dictionary
const sets = ["light", "dark"];
const styleDictionaryJSON = sets.reduce(
  (accumulator, set) => ({
    ...accumulator,
    [set]: transformTokens(rawTokens, ["core", "theme", set], ["core"], {
      expandTypography: true,
    }),
  }),
  []
);

styleDictionaryJSON.core = transformTokens(rawTokens, ["core"], [], {
  expandTypography: true,
});

const coreStyleDictionary = StyleDictionary.extend({
  tokens: styleDictionaryJSON.core,
  platforms: {
    ios: {
      ...STYLE_DICTIONARY_BASE_PLATFORM_CONFIG,
      files: [
        {
          destination: "StyleGuideColors.swift",
          format: "custom/format/ios-ys-style-guide-colors",
        },
      ],
    },
  },
});

const lightStyleDictionary = StyleDictionary.extend({
  tokens: styleDictionaryJSON.light,
  platforms: {
    ios: {
      ...STYLE_DICTIONARY_BASE_PLATFORM_CONFIG,
      files: [
        {
          destination: "YSLight.swift",
          format: "ios-swift/class.swift",
        },
      ],
    },
  },
});

const darkStyleDictionary = StyleDictionary.extend({
  tokens: styleDictionaryJSON.dark,
  platforms: {
    ios: {
      ...STYLE_DICTIONARY_BASE_PLATFORM_CONFIG,
      files: [
        {
          destination: "StyleGuideColors.swift",
          format: "ios-swift/class.swift",
        },
      ],
    },
  },
});

module.exports = {
  buildiOSTokens: function () {
    [coreStyleDictionary].forEach((styleDictionary) =>
      styleDictionary.buildAllPlatforms()
    );
  },
};
