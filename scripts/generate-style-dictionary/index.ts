import { transformTokens } from "token-transformer";
import StyleDictionary from "style-dictionary";
import kebabCase from "lodash.kebabcase";

import { CORE, tokenSetNames } from "./constants";
import { attributeCTITokensStudio, attributeModeTheme } from "./transforms";

// Tokens generated by Tokens Studio
import rawTokens from "../../tokens.json";

const BUILD_PATH = "style-dictionary/";

// Custom transform to map Tokens Studio values to category and type attributes usable by Style Dictionary
StyleDictionary.registerTransform(attributeCTITokensStudio);

// Custom transform to add theme and color mode to tokens
StyleDictionary.registerTransform(attributeModeTheme);

// Get set keys for all sets besides our core set
const nonCoreTokenSetNames = tokenSetNames.filter((name) => name !== CORE);

// Format our Tokens Studio token sets for Style Dictionary
const styleDictionaryTokens: Record<
  string,
  ReturnType<typeof transformTokens>
> = nonCoreTokenSetNames.reduce(
  (accumulator, tokenSetName) => ({
    ...accumulator,
    [tokenSetName]: transformTokens(rawTokens, [CORE, tokenSetName], [CORE], {
      expandTypography: true,
    }),
  }),
  {}
);

styleDictionaryTokens[CORE] = transformTokens(rawTokens, [CORE], [], {
  expandTypography: true,
});

const styleDictionaries = [CORE, ...nonCoreTokenSetNames].map((key) => {
  // Create style dictionary for this token set
  return StyleDictionary.extend({
    tokens: styleDictionaryTokens[key],
    platforms: {
      json: {
        transforms: [
          "attribute/cti/tokensStudio",
          "name/cti/camel",
          "attribute/mode/theme",
        ],
        buildPath: BUILD_PATH,
        files: [
          {
            destination: `${kebabCase(key)}.json`,
            format: "json",
          },
        ],
        options: {
          // Pass in token set name for attribute/mode/theme transform
          tokenSetName: key,
        },
      },
    },
  });
});

styleDictionaries.forEach((styleDictionary) => {
  styleDictionary.buildAllPlatforms();
});
